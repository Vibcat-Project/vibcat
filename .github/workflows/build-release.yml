name: Flutter Multi-Platform Build

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string

env:
  APP_NAME: 'Vibcat'
  FLUTTER_VERSION: '3.35.x'
  JAVA_VERSION: '17'
  APP_DIR: '.' # 可配置应用目录，默认为根目录
  CHANGELOG_FILE: 'CHANGELOG.md' # 可配置版本文件路径

jobs:
  # 读取配置信息
  read-config:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_no_v: ${{ steps.version.outputs.version_no_v }}
      version_desc: ${{ steps.version.outputs.version_desc }}
      prerelease: ${{ steps.version.outputs.prerelease }}
      app_dir: ${{ steps.config.outputs.app_dir }}
    steps:
      - uses: actions/checkout@v4

      - name: Set app directory
        id: config
        run: |
          if [ -f "pubspec.yaml" ]; then
            echo "app_dir=." >> $GITHUB_OUTPUT
          elif [ -d "${{ env.APP_DIR }}" ] && [ -f "${{ env.APP_DIR }}/pubspec.yaml" ]; then
            echo "app_dir=${{ env.APP_DIR }}" >> $GITHUB_OUTPUT
          else
            # 尝试查找Flutter项目目录
            APP_DIR=$(find . -name "pubspec.yaml" -type f | head -1 | xargs dirname)
            echo "app_dir=${APP_DIR:-./app}" >> $GITHUB_OUTPUT
          fi

      - name: Read version info
        id: version
        run: |
          VERSION="${{ github.event.inputs.version_tag || github.ref_name }}"
          VERSION_NO_V="${VERSION#v}"
          VERSION_DESC=""
          PRERELEASE="false"
          
          # 优先级1: 使用CHANGELOG.md
          if [ -f "${{ env.CHANGELOG_FILE }}" ]; then
            echo "Using changelog file: ${{ env.CHANGELOG_FILE }}"
          
            # 提取最新版本的变更日志
            # 查找形如 ## [1.0.0] - 2023-01-01 的标题行
            LATEST_SECTION=$(awk '/^## \[.*\]/ {if(found) exit; found=1; start=NR} found && /^## \[.*\]/ && NR>start {exit} found {print}' "${{ env.CHANGELOG_FILE }}")
          
            if [ -n "$LATEST_SECTION" ]; then
              # 提取版本号（去掉方括号）
              CHANGELOG_VERSION=$(echo "$LATEST_SECTION" | head -1 | sed -n 's/^## \[\([^]]*\)\].*/\1/p')
          
              # 如果changelog中的版本与当前tag匹配，使用changelog内容
              if [ "$CHANGELOG_VERSION" = "$VERSION_NO_V" ]; then
                VERSION_DESC=$(echo "$LATEST_SECTION" | tail -n +2 | head -100)
              else
                VERSION_DESC="Release $VERSION"
              fi
          
              # 检查是否为预发布版本
              if echo "$VERSION" | grep -qE "(alpha|beta|rc|pre)"; then
                PRERELEASE="true"
              fi
            else
              VERSION_DESC="Release $VERSION"
            fi
          
          # 优先级2: 使用JSON版本文件
          elif [ -f "${{ env.VERSION_FILE }}" ]; then
            echo "Using version file: ${{ env.VERSION_FILE }}"
            VERSION=$(cat ${{ env.VERSION_FILE }} | jq -r '.version // "Unknown"')
            VERSION_NO_V="${VERSION#v}"
            VERSION_DESC=$(cat ${{ env.VERSION_FILE }} | jq -r '.version_desc // "No description"')
            PRERELEASE=$(cat ${{ env.VERSION_FILE }} | jq -r '.prerelease // false')
          
          # 优先级3: 从git tag获取
          else
            echo "Using git tag information"
            VERSION_DESC="Release $VERSION"
            if echo "$VERSION" | grep -qE "(alpha|beta|rc|pre)"; then
              PRERELEASE="true"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_no_v=$VERSION_NO_V" >> $GITHUB_OUTPUT
          echo "version_desc<<EOF" >> $GITHUB_OUTPUT
          echo "$VERSION_DESC" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT

  # Android 和 iOS 构建
  build-mobile:
    needs: read-config
    runs-on: macos-latest
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - platform: android
            build_cmd: flutter build apk --release --split-per-abi
            artifact_path: build/app/outputs/flutter-apk/*.apk
          - platform: ios
            build_cmd: flutter build ios --release --no-codesign
            artifact_path: build/ios/iphoneos/*.ipa
    steps:
      - uses: actions/checkout@v4

      - name: Setup Android Keystore (Android only)
        if: matrix.platform == 'android'
        id: android_keystore
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: keystore.jks
          encodedString: ${{ secrets.KEYSTORE_BASE64 }}

      - name: Create Android key.properties (Android only)
        if: matrix.platform == 'android'
        run: |
          mkdir -p ${{ needs.read-config.outputs.app_dir }}/android
          cat > ${{ needs.read-config.outputs.app_dir }}/android/key.properties << EOF
          storeFile=${{ steps.android_keystore.outputs.filePath }}
          storePassword=${{ secrets.STORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          EOF

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          cd ${{ needs.read-config.outputs.app_dir }}
          flutter pub get

      - name: Build ${{ matrix.platform }}
        run: |
          cd ${{ needs.read-config.outputs.app_dir }}
          ${{ matrix.build_cmd }}

      - name: Create IPA (iOS only)
        if: matrix.platform == 'ios'
        run: |
          cd ${{ needs.read-config.outputs.app_dir }}
          mkdir -p build/ios/iphoneos/Payload
          cp -R build/ios/iphoneos/Runner.app build/ios/iphoneos/Payload/Runner.app
          cd build/ios/iphoneos/
          zip -q -r ios_no_sign.ipa Payload

      - name: Rename Android APKs
        if: matrix.platform == 'android'
        run: |
          cd ${{ needs.read-config.outputs.app_dir }}/build/app/outputs/flutter-apk
          # 重命名所有APK文件
          for apk in *.apk; do
            if [ -f "$apk" ]; then
              # 提取CPU架构
              arch=""
              if [[ "$apk" == *"arm64-v8a"* ]]; then
                arch="arm64-v8a"
              elif [[ "$apk" == *"armeabi-v7a"* ]]; then
                arch="armeabi-v7a"
              elif [[ "$apk" == *"x86_64"* ]]; then
                arch="x86_64"
              else
                arch="universal"
              fi
              new_name="${{ env.APP_NAME }}-${{ needs.read-config.outputs.version_no_v }}-android-${arch}.apk"
              mv "$apk" "$new_name"
              echo "Renamed $apk to $new_name"
            fi
          done

      - name: Rename iOS IPA
        if: matrix.platform == 'ios'
        run: |
          cd ${{ needs.read-config.outputs.app_dir }}/build/ios/iphoneos
          if [ -f "ios_no_sign.ipa" ]; then
            mv "ios_no_sign.ipa" "${{ env.APP_NAME }}-${{ needs.read-config.outputs.version_no_v }}-ios.ipa"
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: |
            ${{ needs.read-config.outputs.app_dir }}/${{ matrix.artifact_path }}

  # macOS 构建
  build-macos:
    needs: read-config
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Enable Flutter Desktop
        run: flutter config --enable-macos-desktop

      - name: Install dependencies
        run: |
          cd ${{ needs.read-config.outputs.app_dir }}
          flutter pub get

      - name: Build macOS
        run: |
          cd ${{ needs.read-config.outputs.app_dir }}
          flutter build macos --release

      - name: Create macOS ZIP (original)
        run: |
          cd ${{ needs.read-config.outputs.app_dir }}/build/macos/Build/Products/Release
          zip -r "${{ env.APP_NAME }}-${{ needs.read-config.outputs.version_no_v }}-macos.zip" *.app

      - name: Create macOS DMG
        run: |
          cd ${{ needs.read-config.outputs.app_dir }}/build/macos/Build/Products/Release
          
          # 创建临时目录用于DMG
          mkdir -p dmg_temp
          cp -R *.app dmg_temp/
          
          # 创建Applications链接
          ln -s /Applications dmg_temp/Applications
          
          # 创建DMG
          hdiutil create -volname "${{ env.APP_NAME }}" -srcfolder dmg_temp -ov -format UDZO "${{ env.APP_NAME }}-${{ needs.read-config.outputs.version_no_v }}-macos.dmg"
          
          # 清理临时目录
          rm -rf dmg_temp

      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos
          path: |
            ${{ needs.read-config.outputs.app_dir }}/build/macos/Build/Products/Release/${{ env.APP_NAME }}-${{ needs.read-config.outputs.version_no_v }}-macos.zip
            ${{ needs.read-config.outputs.app_dir }}/build/macos/Build/Products/Release/${{ env.APP_NAME }}-${{ needs.read-config.outputs.version_no_v }}-macos.dmg

  # Linux 构建
  build-linux:
    needs: read-config
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libayatana-appindicator3-dev
          # 可选：如果项目需要mpv
          if [ "${{ vars.INSTALL_MPV }}" == "true" ]; then
            sudo apt-get install -y libmpv-dev mpv
          fi

      - name: Enable Flutter Desktop
        run: flutter config --enable-linux-desktop

      - name: Install dependencies
        run: |
          cd ${{ needs.read-config.outputs.app_dir }}
          flutter pub get

      - name: Build Linux
        run: |
          cd ${{ needs.read-config.outputs.app_dir }}
          flutter build linux --release

      - name: Create Linux TAR.GZ (original)
        run: |
          cd ${{ needs.read-config.outputs.app_dir }}/build/linux/x64/release
          tar -czf "${{ env.APP_NAME }}-${{ needs.read-config.outputs.version_no_v }}-linux.tar.gz" bundle/

      - name: Prepare DEB package structure
        run: |
          cd ${{ needs.read-config.outputs.app_dir }}/build/linux/x64/release
          
          # 创建DEB包目录结构
          mkdir -p deb_temp/DEBIAN
          mkdir -p deb_temp/opt/${{ env.APP_NAME }}
          mkdir -p deb_temp/usr/share/applications
          mkdir -p deb_temp/usr/share/pixmaps
          
          # 复制应用文件
          cp -r bundle/* deb_temp/opt/${{ env.APP_NAME }}/
          
          # 创建启动脚本
          cat > deb_temp/opt/${{ env.APP_NAME }}/${{ env.APP_NAME }} << 'EOF'
          #!/bin/bash
          cd "$(dirname "$0")"
          exec ./${{ env.APP_NAME }}
          EOF
          chmod +x deb_temp/opt/${{ env.APP_NAME }}/${{ env.APP_NAME }}
          
          # 创建桌面文件
          cat > deb_temp/usr/share/applications/${{ env.APP_NAME }}.desktop << EOF
          [Desktop Entry]
          Name=${{ env.APP_NAME }}
          Comment=${{ env.APP_NAME }} Application
          Exec=/opt/${{ env.APP_NAME }}/${{ env.APP_NAME }}
          Icon=${{ env.APP_NAME }}
          Terminal=false
          Type=Application
          Categories=Utility;
          EOF
          
          # 创建control文件
          cat > deb_temp/DEBIAN/control << EOF
          Package: ${{ env.APP_NAME }}
          Version: ${{ needs.read-config.outputs.version_no_v }}
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: ${{ env.APP_NAME }} Team <team@example.com>
          Description: ${{ env.APP_NAME }} Application
           A Flutter application built for Linux.
          EOF

      - name: Build DEB package
        run: |
          cd ${{ needs.read-config.outputs.app_dir }}/build/linux/x64/release
          dpkg-deb --build deb_temp "${{ env.APP_NAME }}-${{ needs.read-config.outputs.version_no_v }}-linux.deb"

      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: |
            ${{ needs.read-config.outputs.app_dir }}/build/linux/x64/release/${{ env.APP_NAME }}-${{ needs.read-config.outputs.version_no_v }}-linux.tar.gz
            ${{ needs.read-config.outputs.app_dir }}/build/linux/x64/release/${{ env.APP_NAME }}-${{ needs.read-config.outputs.version_no_v }}-linux.deb

  # Windows 构建
  build-windows:
    needs: read-config
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Enable Flutter Desktop
        run: flutter config --enable-windows-desktop

      - name: Install dependencies
        run: |
          cd ${{ needs.read-config.outputs.app_dir }}
          flutter pub get

      - name: Build Windows
        run: |
          cd ${{ needs.read-config.outputs.app_dir }}
          flutter build windows --release

      - name: Create Windows ZIP (original)
        run: |
          cd ${{ needs.read-config.outputs.app_dir }}/build/windows/x64/runner/Release
          Compress-Archive -Path * -DestinationPath "${{ env.APP_NAME }}-${{ needs.read-config.outputs.version_no_v }}-windows.zip"

      - name: Install NSIS
        run: |
          Invoke-WebRequest -Uri "https://nsis.sourceforge.io/mediawiki/images/4/4a/NSIS_3.08.zip" -OutFile "nsis.zip"
          Expand-Archive -Path "nsis.zip" -DestinationPath "nsis"
          $env:PATH += ";$(Get-Location)\nsis\NSIS 3.08"
          echo "$(Get-Location)\nsis\NSIS 3.08" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Create NSIS installer script
        run: |
          cd ${{ needs.read-config.outputs.app_dir }}/build/windows/x64/runner/Release
          
          $nsisScript = @"
          !define APP_NAME "${{ env.APP_NAME }}"
          !define VERSION "${{ needs.read-config.outputs.version_no_v }}"
          !define PUBLISHER "${{ env.APP_NAME }} Team"
          !define WEB_SITE "https://github.com/${{ github.repository }}"
          !define APP_EXE "${{ env.APP_NAME }}.exe"
          
          Name "`${APP_NAME}"
          OutFile "${{ env.APP_NAME }}-${{ needs.read-config.outputs.version_no_v }}-windows-installer.exe"
          InstallDir "`$PROGRAMFILES\`${APP_NAME}"
          RequestExecutionLevel admin
          
          Section "MainSection" SEC01
            SetOutPath "`$INSTDIR"
            File /r "*"
            CreateDirectory "`$SMPROGRAMS\`${APP_NAME}"
            CreateShortCut "`$SMPROGRAMS\`${APP_NAME}\`${APP_NAME}.lnk" "`$INSTDIR\`${APP_EXE}"
            CreateShortCut "`$DESKTOP\`${APP_NAME}.lnk" "`$INSTDIR\`${APP_EXE}"
          
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APP_NAME}" "DisplayName" "`${APP_NAME}"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APP_NAME}" "UninstallString" "`$INSTDIR\uninstall.exe"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APP_NAME}" "DisplayVersion" "`${VERSION}"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APP_NAME}" "Publisher" "`${PUBLISHER}"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APP_NAME}" "URLInfoAbout" "`${WEB_SITE}"
            WriteUninstaller "`$INSTDIR\uninstall.exe"
          SectionEnd
          
          Section "Uninstall"
            Delete "`$DESKTOP\`${APP_NAME}.lnk"
            Delete "`$SMPROGRAMS\`${APP_NAME}\`${APP_NAME}.lnk"
            RMDir "`$SMPROGRAMS\`${APP_NAME}"
            RMDir /r "`$INSTDIR"
            DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APP_NAME}"
          SectionEnd
          "@
          
          $nsisScript | Out-File -FilePath "installer.nsi" -Encoding UTF8

      - name: Build NSIS installer
        run: |
          cd ${{ needs.read-config.outputs.app_dir }}/build/windows/x64/runner/Release
          makensis installer.nsi

      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: |
            ${{ needs.read-config.outputs.app_dir }}/build/windows/x64/runner/Release/${{ env.APP_NAME }}-${{ needs.read-config.outputs.version_no_v }}-windows.zip
            ${{ needs.read-config.outputs.app_dir }}/build/windows/x64/runner/Release/${{ env.APP_NAME }}-${{ needs.read-config.outputs.version_no_v }}-windows-installer.exe

  # 创建Release
  create-release:
    needs: [ read-config, build-mobile, build-macos, build-linux, build-windows ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.read-config.outputs.version }}
          body: ${{ needs.read-config.outputs.version_desc }}
          prerelease: ${{ needs.read-config.outputs.prerelease == 'true' }}
          tag_name: ${{ github.event.inputs.version_tag || github.ref_name }}
          files: |
            android/*.apk
            ios/*.ipa
            macos/*.zip
            macos/*.dmg
            linux/*.tar.gz
            linux/*.deb
            windows/*.zip
            windows/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#配置仓库变量和密钥
#  Repository Variables (可选配置)
#  INSTALL_MPV=true              # Linux构建是否安装MPV (true/false)
#
#  Repository Secrets (Android签名需要)
#  KEYSTORE_BASE64              # Android keystore文件的base64编码
#  STORE_PASSWORD               # Keystore密码
#  KEY_PASSWORD                 # Key密码
#  KEY_ALIAS                    # Key别名